{"version":3,"sources":["components/Annotation.js","components/LineChart.js","App.js","reportWebVitals.js","index.js"],"names":["Annotation","xScale","yScale","chartRef","data","margin","value","divRef","useRef","useState","divStyle","setDivStyle","useEffect","current","getBoundingClientRect","chartTop","top","chartLeft","left","chartRight","right","width","height","x","index","opacity","ref","style","className","annotation","onClick","alert","icon","faEdit","faTrashAlt","LineChart","lines","annotations","tooltipRef","tooltip","setTooltip","renderChart","bottom","chartWidth","chartHeight","d3","domain","map","d","i","range","arr","forEach","item","line","push","key","Math","max","getMax","tooltipStyle","useMemo","tooltipWidth","tooltipHeight","visibility","svg","append","attr","call","tickFormat","_","date","ticks","tickSize","tickSizeOuter","lineGenerator","y","curve","datum","color","selectAll","enter","on","dots","fill","clicks","App","uv","pv","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.474c5af0.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Annotation = ({ xScale, yScale, chartRef, data, margin, value }) => {\n  const divRef = useRef(null);\n  const [divStyle, setDivStyle] = useState({});\n  useEffect(() => {\n    const {\n      top: chartTop,\n      left: chartLeft,\n      right: chartRight,\n    } = chartRef.current.getBoundingClientRect();\n    const { width, height } = divRef.current.getBoundingClientRect();\n    const x = xScale(data.index);\n    const y = yScale(value);\n    let top = chartTop + y + margin.top - height - 10;\n    let left = chartLeft + x + margin.left - width / 2;\n\n    if (left + width + margin.left + margin.right > chartRight) {\n      left = chartRight - width - margin.left - margin.right - 5;\n    }\n\n    if (left < chartLeft + margin.left) {\n      left = chartLeft + margin.left;\n    }\n\n    setDivStyle({\n      top,\n      left,\n      opacity: 1,\n    });\n  }, []);\n\n  return (\n    <div ref={divRef} style={divStyle} className=\"annotation-item\">\n      {data.annotation}\n\n      <div className=\"action\">\n        <FontAwesomeIcon onClick={() => alert(\"edit\")} icon={faEdit} />\n        <FontAwesomeIcon onClick={() => alert(\"delete\")} icon={faTrashAlt} />\n      </div>\n    </div>\n  );\n};\n\nexport default Annotation;\n","import React, { useEffect, useState, useRef, useMemo } from \"react\";\nimport * as d3 from \"d3\";\n\nimport \"./line-chart.css\";\nimport Annotation from \"./Annotation\";\n\nconst TICKS = 4;\n\nconst LineChart = ({ data, lines, width, height, annotations }) => {\n  const chartRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const [tooltip, setTooltip] = useState(null);\n\n  useEffect(() => {\n    renderChart();\n  }, []);\n\n  const getMax = () => {\n    const arr = [];\n    data.forEach((item) => {\n      lines.forEach((line) => {\n        arr.push(item[line.key]);\n      });\n    });\n    const max = Math.max(...arr);\n\n    return max;\n  };\n\n  const margin = { top: 50, right: 50, bottom: 50, left: 50 };\n  const chartWidth = width - margin.left - margin.right;\n  const chartHeight = height - margin.top - margin.bottom;\n\n  const xScale = d3\n    .scalePoint()\n    .domain(data.map((d, i) => i))\n    .range([0, chartWidth]);\n\n  const yScale = d3.scaleLinear().domain([0, getMax()]).range([chartHeight, 0]);\n\n  const tooltipStyle = useMemo(() => {\n    if (!tooltip || !chartRef.current || !tooltipRef.current) {\n      return {};\n    }\n    const value = tooltip[tooltip.key];\n    const { left: chartLeft, top: chartTop } =\n      chartRef.current.getBoundingClientRect();\n    const { width: tooltipWidth, height: tooltipHeight } =\n      tooltipRef.current.getBoundingClientRect();\n    let left =\n      chartLeft + xScale(tooltip.index) + margin.left - tooltipWidth / 2;\n    let top = chartTop + yScale(value) + margin.top - tooltipHeight - 10;\n    if (top < chartTop) {\n      top = chartTop + yScale(value) + tooltipHeight + 10;\n    }\n\n    return {\n      left,\n      top,\n      visibility: \"visible\",\n    };\n  }, [tooltip, chartRef.current, tooltipRef.current]);\n\n  const renderChart = () => {\n    const svg = d3\n      .select(chartRef.current)\n      .append(\"svg\")\n      .attr(\"width\", chartWidth + margin.left + margin.right)\n      .attr(\"height\", chartHeight + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x axis\")\n      .attr(\"transform\", \"translate(0,\" + chartHeight + \")\")\n      .call(d3.axisBottom(xScale).tickFormat((_, i) => data[i].date));\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"y axis\")\n      .call(d3.axisLeft(yScale).ticks(TICKS));\n\n    //Grid line\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"grid\")\n      .call(\n        d3\n          .axisLeft(yScale)\n          .ticks(TICKS)\n          .tickSize(-chartWidth)\n          .tickFormat(\"\")\n          .tickSizeOuter(0)\n      );\n\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"grid\")\n      .attr(\"transform\", \"translate(0,\" + chartHeight + \")\")\n      .call(\n        d3\n          .axisBottom(xScale)\n          .tickSize(-chartHeight)\n          .tickFormat(\"\")\n          .tickSizeOuter(0)\n      );\n\n    lines.forEach((line) => {\n      const key = line.key;\n      const lineGenerator = d3\n        .line()\n        .x((d, i) => xScale(i))\n        .y((d) => yScale(d[key]))\n        .curve(d3.curveMonotoneX);\n\n      svg\n        .append(\"path\")\n        .datum(data)\n        .attr(\"class\", \"line\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", line.color)\n        .attr(\"stroke-width\", 2)\n        .attr(\"d\", lineGenerator);\n\n      svg\n        .append(\"g\")\n        .selectAll(`circle-${line.key}`)\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .attr(\"class\", \"dot\")\n        .attr(\"fill\", line.color)\n        .attr(\"cx\", (d, i) => xScale(i))\n        .attr(\"cy\", (d) => yScale(d[key]))\n        .attr(\"r\", 5)\n        .on(\"mouseover\", (d, index, dots) => {\n          const dot = dots[index];\n          dot.style.fill = \"red\";\n          setTooltip({\n            ...d,\n            index,\n            key,\n          });\n        })\n        .on(\"mouseout\", (d, index, dots) => {\n          const dot = dots[index];\n          dot.style.fill = line.color;\n          setTooltip(null);\n        });\n    });\n  };\n\n  return (\n    <div>\n      <div ref={chartRef} />\n\n      <div ref={tooltipRef} style={tooltipStyle} className=\"chart-tooltip\">\n        <div className=\"date\">15/10/2020</div>\n        <div className=\"property\">\n          <span className=\"label\">URL:</span>\n          <span className=\"value\">http://google.com</span>\n        </div>\n        <div className=\"property\">\n          <span className=\"label\">Clicks:</span>\n          <span className=\"value\">{tooltip?.clicks}</span>\n        </div>\n      </div>\n\n      {annotations.map((item, index) => (\n        <Annotation\n          key={index}\n          chartRef={chartRef}\n          value={data[item.index][item.key]}\n          data={item}\n          xScale={xScale}\n          yScale={yScale}\n          margin={margin}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default LineChart;\n","import React from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./components/LineChart\";\n\nfunction App() {\n  const data = [\n    {\n      date: \"Test\",\n      uv: 10,\n      pv: 20,\n    },\n    {\n      date: \"Test 1\",\n      uv: 20,\n      pv: 10,\n    },\n    {\n      date: \"Test 2\",\n      uv: 5,\n      pv: 50,\n    },\n    {\n      date: \"Test 3\",\n      uv: 60,\n      pv: 30,\n    },\n    {\n      date: \"Test 4\",\n      uv: 50,\n      pv: 20,\n    },\n    {\n      date: \"Test 5\",\n      uv: 20,\n      pv: 70,\n    },\n    {\n      date: \"Test 6\",\n      uv: 40,\n      pv: 50,\n    },\n  ];\n\n  const lines = [\n    {\n      key: \"uv\",\n      color: \"#8884d8\",\n    },\n    {\n      key: \"pv\",\n      color: \"#82ca9d\",\n    },\n  ];\n\n  const annotations = [\n    {\n      key: \"uv\",\n      index: 0,\n      annotation: \"First annotation\",\n    },\n    {\n      key: \"uv\",\n      index: 6,\n      annotation: \"Last annotaion\",\n    },\n    {\n      key: \"uv\",\n      index: 2,\n      annotation: \"This is test\",\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <LineChart\n        lines={lines}\n        data={data}\n        width={800}\n        height={400}\n        annotations={annotations}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}